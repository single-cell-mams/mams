data.filtered <- Read10X(data.dir = "../data/filtered_gene_bc_matrices/")
library(dplyr)
library(Seurat)
library(patchwork)
data.filtered <- Read10X(data.dir = "../data/filtered_gene_bc_matrices/")
data.filtered <- Read10X(data.dir = "../../data/filtered_gene_bc_matrices/")
data.filtered <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.raw <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
library(dplyr)
library(Seurat)
library(patchwork)
data.raw <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.filtered <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
seurat.raw <- CreateSeuratObject(counts = data.raw, project = "pbmc1k", min.cells = 0, min.features = 0)
class(data.raw)
length(data.raw)
dim(data.raw[[1]])
dim(data.raw[[2]])
?CreateSeuratObject
seurat.raw <- CreateSeuratObject(counts = data.raw, project = "pbmc1k")
head(colnames(data.raw[[1]]))
head(colnames(data.raw[[2]]))
head(rownames(data.raw[[2]]))
seurat.filtered <- CreateSeuratObject(counts = data.filtered, project = "pbmc1k", min.cells = 3, min.features = 200)
install.packages("Seurat")
install.packages("Seurat")
install.packages("Seurat")
library(Seurat)
library(dplyr)
library(Seurat)
library(patchwork)
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
filtered.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = data.raw, project = "pbmc1k")
data.raw <- CreateSeuratObject(counts = raw.matrices, project = "pbmc1k")
data.filtered <- CreateSeuratObject(counts = filtered.matrices, project = "pbmc1k", min.cells = 3, min.features = 200)
?CreateSeuratObject
dim(data.raw[[2]])
adt <- CreateAssayObject(counts = data.raw[[2]])
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
dim(data.raw)
nonempty.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.nonempty <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = nonempty.matrices[[2]])
data.nonempty[[ADT]] <- adt
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = data.raw[[2]])
length(data.raw)
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = raw.matrices[[2]])
data.raw[["ADT"]] <- adt
nonempty.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.nonempty <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = nonempty.matrices[[2]])
data.nonempty[["ADT"]] <- adt
data.detected <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k", min.cells = 3, min.features = 200)
adt <- CreateAssayObject(counts = nonempty.matrices[[2]], min.cells = 3, min.features = 5)
data.detected[["ADT"]] <- adt
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = raw.matrices[[2]])
data.raw[["ADT"]] <- adt
nonempty.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.nonempty <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = nonempty.matrices[[2]])
data.nonempty[["ADT"]] <- adt
data.nonempty[["percent.mt"]] <- PercentageFeatureSet(data.nonempty, pattern = "^MT-")
data <- subset(data.nonempty, subset = nFeature_RNA > 200 & percent.mt < 5)
DefaultAssay(data) <- 'RNA'
data <- NormalizeData(data) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA()
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca')
data <- FindMultiModalNeighbors(
data, reduction.list = list("pca", "apca"),
dims.list = list(1:20, 1:10), modality.weight.name = "RNA.weight"
)
data <- RunUMAP(data, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
data <- FindClusters(data, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(bm, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5)
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5)
DefaultAssay(data) <- 'RNA'
data <- NormalizeData(data) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA()
data <- RunUMAP(data, reduction = 'pca', dims = 1:20, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
DimPlot(data, reduction = 'rna.umap')
DimPlot(data, reduction = 'rna.umap')
?RunPCA
DefaultAssay(data) <- 'RNA'
data <- NormalizeData(data) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA()
data <- RunUMAP(data, reduction = 'pca', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
DimPlot(data, reduction = 'rna.umap')
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca', dims = 1:10)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
DimPlot(data, reduction = 'adt.umap')
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca', dims = 1:10)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
DimPlot(data, reduction = 'adt.umap')
DimPlot(data, reduction = 'rna.umap')
colnames(data@meta.data)
data <- RunUMAP(data, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
data <- FindClusters(data, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5)
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5)
FeaturePlot(data, features = c("adt_CD45RA","adt_CD16","adt_CD161"),
reduction = 'wnn.umap', max.cutoff = 2,
cols = c("lightgrey","darkgreen"), ncol = 3)
FeaturePlot(data, features = c("adt_CDe","adt_CD19","adt_CD161"),
reduction = 'wnn.umap', max.cutoff = 2,
cols = c("lightgrey","darkgreen"), ncol = 3)
FeaturePlot(data, features = c("adt_CD3","adt_CD19"),
reduction = 'wnn.umap', max.cutoff = 2,
cols = c("lightgrey","darkgreen"), ncol = 2)
FeaturePlot(data, features = c("adt_CD3","rna_CD3E"),
reduction = 'wnn.umap', max.cutoff = 2,
cols = c("lightgrey","darkgreen"), ncol = 2)
FeaturePlot(data, features = c("adt_CD3","rna_CD3E"),
reduction = 'wnn.umap',
cols = c("lightgrey","darkgreen"), ncol = 2)
FeaturePlot(data, features = c("adt_CD3","rna_CD3E"), reduction = 'wnn.umap')
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE)
sum(data[["seurat_clusters"]] %in% 1:7)
head(data[["seurat_clusters"]])
head(data["seurat_clusters"])
head(data[["seurat_clusters"]][,1])
head(data[["seurat_clusters"]][,1] == 8)
table(data[["seurat_clusters"]][,1] %in% 1:7)
Assays(data)
data.tcell <- subset(data, data[["seurat_clusters"]][,1] %in% 1:7)
data.tcell <- subset(data, data[["seurat_clusters"]][,1] %in% 1:7)
dim(data)
head(data[["seurat_clusters"]])
head(data[["seurat_clusters"]][,1])
data.tcell <- subset(data, data[["seurat_clusters"]][,1] %in% 1:7)
DefaultAssay(data) <- 'RNA'
data.tcell <- subset(data, data[["seurat_clusters"]][,1] %in% 1:7)
data.tcell <- subset(data, seurat_clusters %in% 1:7)
dim(data.tcell)
data.tcell <- subset(data, seurat_clusters %in% 1:7)
DefaultAssay(data.tcell) <- 'RNA'
data.tcell <- NormalizeData(data.tcell) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA(reduction.name = "pca.tcell")
data.tcell <- RunUMAP(data.tcell, reduction = 'pca.tcell', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.tcell.umap', reduction.key = 'rnaUMAP_')
DefaultAssay(data.tcell) <- 'RNA'
data.tcell <- NormalizeData(data.tcell) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA(reduction.name = "pca.tcell")
data.tcell <- RunUMAP(data.tcell, reduction = 'pca.tcell', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.tcell.umap', reduction.key = 'rnaTcellUMAP_')
DimPlot(data.tcell, reduction = 'rna.tcell.umap')
DefaultAssay(data.tcell) <- 'ADT'
VariableFeatures(data.tcell) <- rownames(data.tcell[["ADT"]])
data <- NormalizeData(data.tcell, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca.tcell', dims = 1:10)
data <- RunUMAP(data, reduction = 'apca.tcell', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.tcell.umap', reduction.key = 'adtTcellUMAP_')
DimPlot(data, reduction = 'adt.tcell.umap')
data <- FindMultiModalNeighbors(
data, reduction.list = list("pca.tcell", "apca.tcell"),
dims.list = list(1:10, 1:10), modality.weight.name = "RNA.weight"
)
data <- RunUMAP(data, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
data <- FindClusters(data, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
dim(data.tcell)
data.tcell <- FindMultiModalNeighbors(
data.tcell, reduction.list = list("pca.tcell", "apca.tcell"),
dims.list = list(1:10, 1:10), modality.weight.name = "RNA.weight"
)
DimPlot(data.tcell, reduction = 'adt.tcell.umap')
DimPlot(data.tcell, reduction = 'adt.tcell.umap')
DefaultAssay(data.tcell) <- 'ADT'
VariableFeatures(data.tcell) <- rownames(data.tcell[["ADT"]])
data.tcell <- NormalizeData(data.tcell, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca.tcell', dims = 1:10)
data.tcell <- RunUMAP(data.tcell, reduction = 'apca.tcell', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.tcell.umap', reduction.key = 'adtTcellUMAP_')
DimPlot(data.tcell, reduction = 'adt.tcell.umap')
data.tcell <- FindMultiModalNeighbors(
data.tcell, reduction.list = list("pca.tcell", "apca.tcell"),
dims.list = list(1:10, 1:10), modality.weight.name = "RNA.weight"
)
data.tcell <- RunUMAP(data.tcell, nn.name = "weighted.nn.tcell", reduction.name = "wnn.tcell.umap", reduction.key = "wnnUMAP_")
?FindMultiModalNeighbors
data.tcell <- FindMultiModalNeighbors(
data.tcell, reduction.list = list("pca.tcell", "apca.tcell"),
snn.graph.name = "wsnn.tcell",
dims.list = list(1:10, 1:10), modality.weight.name = "RNA.weight"
)
data.tcell <- RunUMAP(data.tcell, nn.name = "weighted.nn.tcell", reduction.name = "wnn.tcell.umap", reduction.key = "wnnUMAP_")
data.tcell <- RunUMAP(data.tcell, nn.name = "weighted.nn", reduction.name = "wnn.tcell.umap", reduction.key = "wnnUMAP_")
data.tcell <- FindClusters(data.tcell, graph.name = "wsnn.tcell", algorithm = 3, resolution = 2, verbose = FALSE)
data.tcell <- FindMultiModalNeighbors(
data.tcell, reduction.list = list("pca.tcell", "apca.tcell"),
dims.list = list(1:10, 1:10), modality.weight.name = "RNA.weight"
)
data.tcell <- RunUMAP(data.tcell, nn.name = "weighted.nn", reduction.name = "wnn.tcell.umap", reduction.key = "wnnTcellUMAP_")
data.tcell <- FindClusters(data.tcell, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data.tcell, reduction = 'wnn.tcell.umap', label = TRUE, repel = TRUE)
FeaturePlot(data.tcell, features = c("adt_CD3","rna_CD3E"), reduction = 'wnn.tcell.umap')
colnames(data.tcell@meta.data)
data.tcell <- FindClusters(data.tcell, algorithm = 3, resolution = 2, verbose = FALSE)
DefaultAssay(data) <- 'RNA'
data <- FindClusters(data, resolution = 2, verbose = FALSE)
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 2, verbose = FALSE)
?FindClusters
colnames(data@meta.data)
?DimPlot
DimPlot(data, reduction = 'rna.umap')
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca', dims = 1:10)
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
DimPlot(data, reduction = 'adt.umap')
colnames(data@meta.data)
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 2, verbose = FALSE)
?FindClusters
?FindNeighbors
data <- FindClusters(data, graph.name = "ADT.apca_snn", resolution = 2, verbose = FALSE)
data <- FindNeighbors(data, reduction = "apca", dims = 1:10)
data <- FindClusters(data, graph.name = "ADT_snn", resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10,
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
head(data@meta.data)
library(dplyr)
library(Seurat)
library(patchwork)
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = raw.matrices[[2]])
data.raw[["ADT"]] <- adt
nonempty.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.nonempty <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = nonempty.matrices[[2]])
data.nonempty[["ADT"]] <- adt
data.nonempty[["percent.mt"]] <- PercentageFeatureSet(data.nonempty, pattern = "^MT-")
data <- subset(data.nonempty, subset = nFeature_RNA > 200 & percent.mt < 5)
DefaultAssay(data) <- 'RNA'
data <- NormalizeData(data) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA()
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'pca', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
DimPlot(data, reduction = 'rna.umap')
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca', dims = 1:10)
data <- FindNeighbors(data, reduction = "apca", dims = 1:10)
data <- FindClusters(data, graph.name = "ADT_snn", resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10,
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
DimPlot(data, reduction = 'adt.umap')
data <- FindMultiModalNeighbors(
data, reduction.list = list("pca", "apca"),
dims.list = list(1:20, 1:10), modality.weight.name = "RNA.weight"
)
data <- RunUMAP(data, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
data <- FindClusters(data, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE)
FeaturePlot(data, features = c("adt_CD3","rna_CD3E"), reduction = 'wnn.umap')
data.tcell <- subset(data, seurat_clusters %in% 1:7)
DefaultAssay(data.tcell) <- 'RNA'
data.tcell <- NormalizeData(data.tcell) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA(reduction.name = "pca.tcell")
data.tcell <- RunUMAP(data.tcell, reduction = 'pca.tcell', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.tcell.umap', reduction.key = 'rnaTcellUMAP_')
DimPlot(data.tcell, reduction = 'rna.tcell.umap')
DefaultAssay(data.tcell) <- 'ADT'
VariableFeatures(data.tcell) <- rownames(data.tcell[["ADT"]])
data.tcell <- NormalizeData(data.tcell, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca.tcell', dims = 1:10)
data.tcell <- RunUMAP(data.tcell, reduction = 'apca.tcell', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.tcell.umap', reduction.key = 'adtTcellUMAP_')
data.tcell <- FindNeighbors()
library(dplyr)
library(Seurat)
library(patchwork)
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = raw.matrices[[2]])
data.raw[["ADT"]] <- adt
nonempty.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.nonempty <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = nonempty.matrices[[2]])
data.nonempty[["ADT"]] <- adt
data.nonempty[["percent.mt"]] <- PercentageFeatureSet(data.nonempty, pattern = "^MT-")
data <- subset(data.nonempty, subset = nFeature_RNA > 200 & percent.mt < 5)
DefaultAssay(data) <- 'RNA'
data <- NormalizeData(data) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA()
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'pca', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
DimPlot(data, reduction = 'rna.umap')
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca', dims = 1:10)
data <- FindNeighbors(data, reduction = "apca", dims = 1:10)
data <- FindClusters(data, graph.name = "ADT_snn", resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10,
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
DimPlot(data, reduction = 'adt.umap')
data <- FindMultiModalNeighbors(
data, reduction.list = list("pca", "apca"),
dims.list = list(1:20, 1:10), modality.weight.name = "RNA.weight"
)
data <- RunUMAP(data, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
data <- FindClusters(data, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE)
FeaturePlot(data, features = c("adt_CD3","rna_CD3E"), reduction = 'wnn.umap')
data.tcell <- subset(data, seurat_clusters %in% 1:7)
DefaultAssay(data.tcell) <- 'RNA'
data.tcell <- NormalizeData(data.tcell) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA(reduction.name = "pca.tcell")
data.tcell <- FindNeighbors(data.tcell, reduction = "pca.tcell", dims = 1:10)
data.tcell <- FindClusters(data.tcell, resolution = 2, verbose = FALSE)
data.tcell <- RunUMAP(data.tcell, reduction = 'pca.tcell', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.tcell.umap', reduction.key = 'rnaTcellUMAP_')
DimPlot(data.tcell, reduction = 'rna.tcell.umap')
DefaultAssay(data.tcell) <- 'ADT'
VariableFeatures(data.tcell) <- rownames(data.tcell[["ADT"]])
data.tcell <- NormalizeData(data.tcell, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca.tcell', dims = 1:10)
data.tcell <- RunUMAP(data.tcell, reduction = 'apca.tcell', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.tcell.umap', reduction.key = 'adtTcellUMAP_')
data <- FindNeighbors(data, reduction = "apca.tcell", dims = 1:10)
DefaultAssay(data.tcell) <- 'ADT'
VariableFeatures(data.tcell) <- rownames(data.tcell[["ADT"]])
data.tcell <- NormalizeData(data.tcell, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca.tcell', dims = 1:10)
data.tcell <- RunUMAP(data.tcell, reduction = 'apca.tcell', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.tcell.umap', reduction.key = 'adtTcellUMAP_')
data.tcell <- FindNeighbors(data.tcell, reduction = "apca.tcell", dims = 1:10)
data.tcell <- FindClusters(data.tcell, graph.name = "ADT_snn", resolution = 2, verbose = FALSE)
data.tcell <- FindClusters(data.tcell, algorithm = 3, resolution = 2, verbose = FALSE)
library(dplyr)
library(Seurat)
library(patchwork)
raw.matrices <- Read10X(data.dir = "../../data/raw_feature_bc_matrix")
data.raw <- CreateSeuratObject(counts = raw.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = raw.matrices[[2]])
data.raw[["ADT"]] <- adt
nonempty.matrices <- Read10X(data.dir = "../../data/filtered_feature_bc_matrix")
data.nonempty <- CreateSeuratObject(counts = nonempty.matrices[[1]], assay = "RNA", project = "pbmc1k")
adt <- CreateAssayObject(counts = nonempty.matrices[[2]])
data.nonempty[["ADT"]] <- adt
data.nonempty[["percent.mt"]] <- PercentageFeatureSet(data.nonempty, pattern = "^MT-")
data <- subset(data.nonempty, subset = nFeature_RNA > 200 & percent.mt < 5)
DefaultAssay(data) <- 'RNA'
data <- NormalizeData(data) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA()
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'pca', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
DimPlot(data, reduction = 'rna.umap')
DefaultAssay(data) <- 'ADT'
VariableFeatures(data) <- rownames(data[["ADT"]])
data <- NormalizeData(data, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca', dims = 1:10)
data <- FindNeighbors(data, reduction = "apca", dims = 1:10)
data <- FindClusters(data, graph.name = "ADT_snn", resolution = 2, verbose = FALSE)
data <- RunUMAP(data, reduction = 'apca', dims = 1:10,
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
DimPlot(data, reduction = 'adt.umap')
data <- FindMultiModalNeighbors(
data, reduction.list = list("pca", "apca"),
dims.list = list(1:20, 1:10), modality.weight.name = "RNA.weight"
)
data <- RunUMAP(data, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
data <- FindClusters(data, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data, reduction = 'wnn.umap', label = TRUE, repel = TRUE)
FeaturePlot(data, features = c("adt_CD3","rna_CD3E"), reduction = 'wnn.umap')
data.tcell <- subset(data, seurat_clusters %in% 1:7)
DefaultAssay(data.tcell) <- 'RNA'
data.tcell <- NormalizeData(data.tcell) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA(reduction.name = "pca.tcell")
data.tcell <- FindNeighbors(data.tcell, reduction = "pca.tcell", dims = 1:10)
data.tcell <- FindClusters(data.tcell, resolution = 2, verbose = FALSE)
data.tcell <- RunUMAP(data.tcell, reduction = 'pca.tcell', dims = 1:10, assay = 'RNA',
reduction.name = 'rna.tcell.umap', reduction.key = 'rnaTcellUMAP_')
DimPlot(data.tcell, reduction = 'rna.tcell.umap')
DefaultAssay(data.tcell) <- 'ADT'
VariableFeatures(data.tcell) <- rownames(data.tcell[["ADT"]])
data.tcell <- NormalizeData(data.tcell, normalization.method = 'CLR', margin = 2) %>%
ScaleData() %>% RunPCA(reduction.name = 'apca.tcell', dims = 1:10)
data.tcell <- RunUMAP(data.tcell, reduction = 'apca.tcell', dims = 1:10, assay = 'ADT',
reduction.name = 'adt.tcell.umap', reduction.key = 'adtTcellUMAP_')
data.tcell <- FindNeighbors(data.tcell, reduction = "apca.tcell", dims = 1:10)
data.tcell <- FindClusters(data.tcell, graph.name = "ADT_snn", resolution = 2, verbose = FALSE)
data.tcell <- FindClusters(data.tcell, algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data.tcell, reduction = 'adt.tcell.umap')
data.tcell <- FindMultiModalNeighbors(
data.tcell, reduction.list = list("pca.tcell", "apca.tcell"),
dims.list = list(1:10, 1:10), modality.weight.name = "RNA.weight"
)
data.tcell <- RunUMAP(data.tcell, nn.name = "weighted.nn", reduction.name = "wnn.tcell.umap", reduction.key = "wnnTcellUMAP_")
data.tcell <- FindClusters(data.tcell, graph.name = "wsnn", algorithm = 3, resolution = 2, verbose = FALSE)
DimPlot(data.tcell, reduction = 'wnn.tcell.umap', label = TRUE, repel = TRUE)
saveRDS(data.raw, "pbmc1k_seurat_raw.rds")
saveRDS(data.nonempty, "pbmc1k_seurat_nonempty.rds")
saveRDS(data, "pbmc1k_seurat_filtered.rds")
saveRDS(data.tcell, "pbmc1k_seurat_tcell.rds")
sessionInfo()
